Implement Generative Adversarial Deep Learning model for Image Generation

and Data Augmentation.

import tensorflow as tf

from tensorflow.keras.datasets import mnist

from tensorflow.keras.models import Sequential, Model

from tensorflow.keras.layers import Dense, Reshape, Flatten, Input

from tensorflow.keras.optimizers import Adam

import numpy as np

import matplotlib.pyplot as plt

# Define parameters

random_dim = 100

adam = Adam(lr=0.0002, beta_1=0.5)

# Create the generator model

generator = Sequential([

Dense(256, input_dim=random_dim, activation='relu'),

Dense(512, activation='relu'),

Dense(1024, activation='relu'),

Dense(784, activation='sigmoid'),

Reshape((28, 28))

])

# Create the discriminator model

discriminator = Sequential([

Flatten(input_shape=(28, 28)),
Dense(1024, activation='relu'),

Dense(512, activation='relu'),

Dense(256, activation='relu'),

Dense(1, activation='sigmoid')

])

# Compile the discriminator

discriminator.compile(loss='binary_crossentropy', optimizer=adam)

# Combine generator and discriminator to create GAN

discriminator.trainable = False

gan_input = Input(shape=(random_dim,))

x = generator(gan_input)

gan_output = discriminator(x)

gan = Model(gan_input, gan_output)

gan.compile(loss='binary_crossentropy', optimizer=adam)

# Load and preprocess the dataset

(x_train, _), (_, _) = mnist.load_data()

x_train = x_train / 255.0

x_train = np.expand_dims(x_train, axis=-1)

# Training parameters

batch_size = 64

epochs = 10000

sample_interval = 1000

# Training the GAN

for e in range(epochs + 1):

# Train discriminator

idx = np.random.randint(0, x_train.shape[0], batch_size)

real_imgs = x_train[idx]
noise = np.random.normal(0, 1, (batch_size, random_dim))

fake_imgs = generator.predict(noise)

real_labels = np.ones((batch_size, 1))

fake_labels = np.zeros((batch_size, 1))

d_loss_real = discriminator.train_on_batch(real_imgs, real_labels)

d_loss_fake = discriminator.train_on_batch(fake_imgs, fake_labels)

d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

# Train generator

noise = np.random.normal(0, 1, (batch_size, random_dim))

valid_labels = np.ones((batch_size, 1))

g_loss = gan.train_on_batch(noise, valid_labels)

if e % sample_interval == 0:

print(f"Epoch {e}, Discriminator Loss: {d_loss[0]}, Generator Loss: {g_loss}")

# Save generated images

samples = 10

noise = np.random.normal(0, 1, (samples, random_dim))

generated_imgs = generator.predict(noise)

generated_imgs = generated_imgs.reshape(-1, 28, 28)

plt.figure(figsize=(10, 2))

for i in range(samples):

plt.subplot(1, samples, i + 1)

plt.imshow(generated_imgs[i], cmap='gray')

plt.axis('off')

plt.show()
